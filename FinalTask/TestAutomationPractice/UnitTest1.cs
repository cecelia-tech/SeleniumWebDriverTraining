namespace TestAutomationPractice;

[AllureNUnit]
[TestFixture]
public class AutomationPracticeTests : TestBaseClass
{
    private const string URL = "http://automationpractice.com/index.php?controller=authentication&back=my-account";
    private const string MY_WISHLIST_NAME = "DreamPurchases";



    [Test]
    [TestCaseSource(typeof(DataFromFile2), nameof(DataFromFile2.RegisterFormData))]
    public void TestSignUp(string firstName, string lastName, string email, string password,
        string address, string city, string state, string zipCode, string country, string mobile_phone, string alias)
    {
        try
        {
            var loginPage = Page.Login.LoadPage();
            var signupPage = Page.Login.SubmitEmailForm(DataFromFile2.GetElementValue("email"));
            Assert.IsTrue(signupPage.IsPageLoaded(), "SignUp page was not loaded");
            var userHomePage = signupPage.FillRegistrationForm(firstName, lastName, email, password,
        address, city, state, zipCode, country, mobile_phone, alias);
            Assert.IsTrue(userHomePage.IsPageLoaded(), "User homepage was not loaded");
        }
        catch (Exception e)
        {
            Assert.Fail(e.Message);
        }
    }

    [Test]
    public void TestLogIn()
    {
        try
        {
            BrowserEnvironment.LoadApplication(URL);
            var logInPage = Page.Login;
            var userHomePage = logInPage.FillLogInDetails(DataFromFile2.GetElementValue("email"), DataFromFile2.GetElementValue("password"));
            Assert.IsTrue(userHomePage.IsPageLoaded(), "User homepage was not loaded");
        }
        catch (Exception e)
        {
            Assert.Fail(e.Message);
        }
    }

    [Test]
    public void TestWishList()
    {
        try
        {
            BrowserEnvironment.LoadApplication(URL);
            var logInPage = Page.Login;
            var userHomePage = logInPage.FillLogInDetails(DataFromFile2.GetElementValue("email"), DataFromFile2.GetElementValue("password"));
            Assert.IsTrue(userHomePage.IsPageLoaded(), "User homepage was not loaded");
            var wishlists = userHomePage.ClickWishlist();
            Assert.IsTrue(wishlists.IsPageLoaded(), "wishlists page was not loaded");
        }
        catch (Exception e)
        {
            Assert.Fail(e.Message);
        }
    }

    [Test]
    public void TestAddToWishList()
    {
        try
        {
            BrowserEnvironment.LoadApplication(URL);
            var logInPage = Page.Login;
            var userHomePage = logInPage.FillLogInDetails(DataFromFile2.GetElementValue("email"), DataFromFile2.GetElementValue("password"));
            Assert.IsTrue(userHomePage.IsPageLoaded(), "User homepage was not loaded");
            var wishlists = userHomePage.ClickWishlist();
            Assert.IsTrue(wishlists.IsPageLoaded(), "Wishlists page was not loaded");
            Assert.IsFalse(wishlists.DoesAutoGeneratedWishListExist(), "There is no auto generated wishlist");
            var productPage = wishlists.ClickProduct();
            Assert.IsTrue(productPage.IsPageLoaded(), "Product page was not loaded");
            productPage = productPage.AddToWishList();
            wishlists = productPage.GoToUserHomePage().ClickWishlist();
            Assert.IsTrue(wishlists.CheckProductAddedToAutoWishList(), "Product was not added to the wishlist");
        }
        catch (Exception e)
        {
            Assert.Fail(e.Message);
        }
    }

    [Test]
    public void TestAddToCustomWishList()
    {
        try
        {
            BrowserEnvironment.LoadApplication(URL);
            var logInPage = Page.Login;
            var userHomePage = logInPage.FillLogInDetails(DataFromFile2.GetElementValue("email"), DataFromFile2.GetElementValue("password"));
            Assert.IsTrue(userHomePage.IsPageLoaded(), "User homepage was not loaded");
            var wishlists = userHomePage.ClickWishlist();
            Assert.IsTrue(wishlists.IsPageLoaded(), "Wishlists page was not loaded");
            wishlists = wishlists.CreateMyWishList(MY_WISHLIST_NAME);
            Assert.IsTrue( wishlists.DoesCustomWishlistWasCreated(MY_WISHLIST_NAME), $"Wishlist with name {MY_WISHLIST_NAME} was not created");
            var productPage = wishlists.ClickProduct();
            Assert.IsTrue(productPage.IsPageLoaded(), "Product page was not loaded");
            productPage = productPage.AddToWishList();
            wishlists = productPage.GoToUserHomePage().ClickWishlist();
            Assert.IsTrue(wishlists.CheckProductAddedToCustomWishList(MY_WISHLIST_NAME), "Product was not added to the wishlist");
        }
        catch (Exception e)
        {
            Assert.Fail(e.Message);
        }
    }

    [Test]
    public void TestAbilityToAddToCart()
    {
        try
        {
            BrowserEnvironment.LoadApplication(URL);
            var logInPage = Page.Login;
            var userHomePage = logInPage.FillLogInDetails(DataFromFile2.GetElementValue("email"), DataFromFile2.GetElementValue("password"));
            Assert.IsTrue(userHomePage.IsPageLoaded(), "User homepage was not loaded");
            var dressesPage = userHomePage.ClickDressesOption();
            Assert.IsTrue(dressesPage.IsPageLoaded(), "Dresses page was not loaded");
            dressesPage = dressesPage.AddThreeDressesToTheCart();
            var cartPage = dressesPage.GoToCart();
            Assert.IsTrue(cartPage.IsPageLoaded(), "Cart page was not loaded");
            var expectedCartTotal = 107.97;
            Assert.AreEqual(expectedCartTotal, cartPage.GetCartTotal(), "Cart total doesn't match");
        }
        catch (Exception e)
        {
            Assert.Fail(e.Message);
        }
    }
}
